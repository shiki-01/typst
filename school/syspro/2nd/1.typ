#import "../../../lib/conf.typ": conf, come, desc, ce, light
#import "@preview/codelst:2.0.1": 
#import "@preview/pintorita:0.1.1"
#import "@preview/fletcher:0.4.3" as fletcher: diagram, node, edge
#show raw.where(lang: "pintora"): it => pintorita.render(it.text)
#show: doc => conf(
  title: [情報システム 2学期],
  date: [2024年9月11日],
  doc,
)

#show heading: it => [
    #if it.level == 1 {
      [
        #set align(center)
        #set text(22pt)
        #pad(
          bottom: -70pt,
          [#it\ ]
        )
      ]
    } else if it.level == 2 {
      [
        #set align(left)
        #set text(18pt)
        #pad(
          top: 15pt,
          bottom: -70pt,
          [#it\ ]
        )
      ]
    } else if it.level == 3 {
      [
        #set align(left)
        #set text(15pt)
        #pad(
          bottom: -70pt,
          [#it\ ]
        )
      ]
    } else {
      [#pad(
        top: 10pt, bottom: 5pt,
        [#it ]
      )]
    }
    #if it.level == 2 {line(length: 100%,stroke: rgb("#eee"))}
    #pad(bottom: -20pt, [])
    #if it.level == 3 {
      [#pad(bottom: 10pt,[])]
    } else if it.level == 2 {
      [#pad(bottom: -10pt,[])]
    }
]

=

= データ構造とアルゴリズム

== データの、型と列データ

=== 基本的なデータ型

==== 論理型

#table(
  columns: 8,
  table.cell(colspan: 2, align: center)[否定],
  table.cell(colspan: 3, align: center)[論理積],
  table.cell(colspan: 3, align: center)[論理和],
  [X],[NOT X],[X],[Y],[X AND Y],[X],[Y],[X OR Y],
  [偽],[真],[偽],[偽],[偽],[偽],[偽],[偽],
  [真],[偽],[偽],[真],[偽],[真],[偽],[真],
  [],  [],  [真],[偽],[偽],[真],[偽],[真],
  [],  [],  [真],[真],[真],[真],[真],[真],
)

==== 文字列型

#desc("Unicode")[
  文字をコンピュータで扱うための標準規格。\
  世界で使われる多くの文字を扱えるように策定されている Unicode が、文字集合（文字コード）として広く採用されている。
]

==== 数値型

- 実数型は、#light[浮動小数点数]で表現される。
- 2進法で限られたビット数によって表現するため、表現できる数値の範囲が限られる。

#pagebreak()

=== 文字列

#desc("文字列")[
  文字を一列に並べたもの。\
  文字列は、文字の配列として扱われることが多い。
]

#table(
  columns: 8,
  [C],[o],[m],[p],[u],[t],[e],[r],
  [0],[1],[2],[3],[4],[5],[6],[7],
)

#desc("文字列の長さ")[
  文字列の長さは、文字列に含まれる文字の数で表現される。\
  例えば、"Computer" は 8 文字の長さを持つ。\
  このとき、先頭の文字の添字は 0 であり、これを 0-origin という。
]

```python
>>> s = 'Computer'
>>> s
'Computer'

>>> s[2]
'm'

>>> type('AAA')
<class 'str'>
```

==== 2 つの文字列の連結

```python
>>> 'ABC' + 'DEF'
'ABCDEF'
```

==== 2 つの文字列の比較

```python
>>> 'ABC' < 'ABE' # 小さい方が先
True

>>> 'AB' < 'ABA'  # 長い方が大きい
True
```

==== 部分文字列の取得

```python
>>> 'ABCDEF'[2:4]
'CD'

>>> s = 'ABCDEF'
>>> s[2:4]
'CD'
```

=== 列データ構造

データ構造とはデータの集まりをコンピュータの中で効果的に扱うための形式のこと。

==== リスト

- リストは、複数のデータをまとめて扱うためのデータ構造。
- リストの要素は、インデックスを使ってアクセスできる。

==== 配列

- 配列は、同じ型のデータを連続したメモリ領域に格納するデータ構造。
- 配列の要素は、インデックスを使ってアクセスできる。

==== スタック

- スタックは、データを一時的に保存するためのデータ構造。
- データの追加や削除は、常に一方向から行われる。

```python
>>> data = [4, 1, 7, 3, 2]
>>> data.append(8)

>>> data
[4, 1, 7, 3, 2, 8]

>>> data[-1]
8

>>> data.pop()
8

>>> data
[4, 1, 7, 3, 2]
```

==== キュー

- キューは、データを一時的に保存するためのデータ構造。
- データの追加は一方向から行い、削除は反対方向から行う。


```python
>>> from collections import deque
>>> data = deque([4, 1, 7, 3, 2])

>>> data
deque([4, 1, 7, 3, 2])

>>> data.popleft()
4

>>> data
deque([1, 7, 3, 2])

>>> data.append(5)
>>> data
deque([1, 7, 3, 2, 5])

>>> data.appendleft(6)
>>> data
deque([6, 1, 7, 3, 2, 5])
```

=== レコード型と連想配列

==== レコード型

- レコード型は、複数のデータをまとめて扱うためのデータ構造。
- レコード型の要素は、フィールドと呼ばれる。

`フィールド名：値` の形式でデータを表現する。

==== 連想配列

- 連想配列は、キーと値のペアを格納するデータ構造。
- キーを使って値にアクセスできる。

`キー：値` の形式でデータを表現する。

\

P.62 問 6

図書館で貸し出す本をレコード型で合わすとすると、どのようなフィールドが昼用になるか考えてみよう。図書館を利用する人の情報をレコード型で表すとすると、どのようなフィールドが必要になるか考えてみよう。

#grid(
  columns: 2,
  gutter: 10em,
  [
    *貸し出す本*
    #table(
      columns: 2,
      [フィールド名],[型],
      [タイトル],[文字列],
      [著者],[文字列],
      [出版社],[文字列],
      [出版年],[整数],
      [貸出状況],[論理型],
    )
  ],
  [
    *利用者*
    #table(
      columns: 2,
      [フィールド名],[型],
      [氏名],[文字列],
      [住所],[文字列],
      [電話番号],[文字列],
      [貸出中],[リスト],
    )
  ]
)

== 問合せと木構造

=== 問合せ

-  正規表現

#table(
  columns: 2,
  [表現],[意味],
  [`a`],[文字 a],
  [`ab`],[文字 a に続く文字 b],
  [`a|b`],[文字 a または文字 b],
  [`^a`],[文字 a で始まる],
  [`a$`],[文字 a で終わる],
  [`^a$`],[文字 a がふくまれる],
  [`a*`],[文字 a の 0 回以上の繰り返し],
  [`a+`],[文字 a の 1 回以上の繰り返し],
  [`a[bc]`],[文字 a の後に b または c],
  [`[a-z]`],[アルファベット小文字],
  [`[A-Z]`],[アルファベット大文字],
  [`[0-9]`],[数字],
  [`a?`],[文字 a の 0 回または 1 回の繰り返し],
  [`a{n}`],[文字 a の n 回の繰り返し],
  [`a{n,}`],[文字 a の n 回以上の繰り返し],
  [`a{n,m}`],[文字 a の n 回以上 m 回以下の繰り返し],
)

=== 集計

- 条件に合致した件数、合計、最大、最小など

*繰り返しを用いて条件にあった件数を数える Python プログラムの例*

```python
>>> data = [4, 1, 7, 3, 2]
>>> kensuu = 0
>>> for i in range(0, 5):
...     if (data[i] % 2 == 0):
...         kensuu += 1
...
>>> print(kensuu) # 2
```

*繰り返しを用いて条件にあった値の最大値を求める Python プログラムの例*

```python
>>> data = [4, 1, 7, 3, 2]
>>> max_value = 0
>>> for i in range(0, 5):
...     if (data[i] % 2 == 0 and data[i] > max_value):
...         max_value = data[i]
...
>>> print(max_value) # 4
```

※ Python には、条件に合致した件数を数える関数や、条件に合致した値の最大値を求める関数が用意されている。

#table(
  columns: 2,
  [関数],[意味],
  [len(data)],[データの長さ],
  [data.count(x)],[データ中の x の個数],
  [max(data)],[データ中の最大値],
  [min(data)],[データ中の最小値],
  [sum(data)],[データの合計],
)

=== 木構造

- 木構造は、階層構造を表現するためのデータ構造。

- 木構造は、根（ルート）となるノードから始まり、枝分かれするノード（内部ノード）と、枝の先端にあるノード（葉ノード）から構成される。

== アルゴリズム

=== アルゴリズムと計算効率

*マージソート*

- マージソートは、分割統治法を用いたアルゴリズムの一つ。
- データを分割し、それぞれをソートしてから結合することで、全体をソートする。

= プログラミング

== プログラミング言語の種類と特性

=== プログラミング言語

#desc("機械語")[
  コンピュータが直接実行するための言語。\
  0 と 1 のビット列で表現される。
]

#desc("アセンブリ言語")[
  機械語に対応する助言語。\
  ニーモニック（助記符号）を使って記述する。
]

#desc("低水準言語")[
  ハードウェアに近い言語。\
  アセンブリ言語や C 言語などがある。
]

#desc("高級言語")[
  人間が理解しやすい形式で記述される言語。\
  プログラムを機械語に変換するコンパイラやインタプリタが必要。
]

=== インタプリタとコンパイラ

#table(
  columns: 2,
  [名前],[方法],
  [インタプリタ],[プログラムを逐次実行],
  [コンパイラ],[プログラム全体を機械語に変換],
  [ジャストインタイムコンパイラ],[必要な部分だけ機械語に変換],
)

=== モデルによる分類

#table(
  columns: 2,
  [モデル],[特徴],
  [手続き型],[手続き（手順）を記述],
  [オブジェクト指向],[オブジェクト（データと手続き）をまとめて扱う],
  [関数型],[関数を第一級の対象として扱う],
  [論理型],[述語論理を基に記述],
)

*プログラミング言語の特徴*

#table(
  columns: 2,
  [言語],[特徴],
  [COBOL],[事務処理用に開発されていたプログラミング言語。金融業界や行政機関において金額計算や帳票処理などで利用されている。],
  [C 言語],[ハードウェアより低水準の記述も可能な手続き型の言語。OS を記述するために開発された経緯からアプリけーそyンに限らず OS 開発などにも用いられる。],
  [C++],[C 言語から派生したオブジェクト指向言語],
  [C\#],[C++ や Java などから影響を受けた文法を持ち、.NET Framework を共通言語基盤とするオブジェクト指向言語。],
  [Java],[主にコンパイラ方式をとるオブジェクト指向言語。中間言語へのコンパイルや様々な OS 向けのランタイムの配布で移植性が高い。],
  [JavaScript],[オブジェクト指向のスクリプト言語で、ECNA Script と呼ばれる標準をブラウザなどで実行系として実装したもの。],
  [Python],[インタプリタ方式をとる高水準言語。シンプルな文法と豊富なライブラリが特徴。],
)

== プログラムの開発官環境

=== プログラム開発に必要なもの

- プログラムを記述するためのエディタ
- プログラムを実行するための実行環境
- プログラムをデバッグするためのデバッガ

== プログラムの作成

=== プログラムの作成手順

1. プログラムの仕様を確認する。
2. プログラムの設計を行う。
3. プログラムを記述する。
4. プログラムをテストする。
5. プログラムをデバッグする。

*HTTPの基礎知識*

#desc("HTTP")[
  インターネット上でデータを送受信するためのプロトコル。\
  クライアントとサーバの間でデータをやり取りするためのルールや手順を定めている。
]

#desc("リクエスト")[
  クライアントがサーバに対して行う要求のこと。\
  リクエストには、メソッド、URI、HTTP バージョン、ヘッダ、ボディなどが含まれる。
]

#desc("レスポンス")[
  サーバがクライアントに対して返すデータのこと。\
  レスポンスには、ステータスコード、HTTP バージョン、ヘッダ、ボディなどが含まれる。
]

#table(
  columns: 2,
  [メソッド],[意味],
  [GET],[リソースの取得],
  [POST],[リソースの作成],
  [PUT],[リソースの更新],
  [DELETE],[リソースの削除],
)

#table(
  columns: 5,
  [アプリケーション層],[HTTPデータ],[],[],[],
  [トランスポート層],[HTTPデータ],[TCP],[],[],
  [インターネット層],[HTTPデータ],[TCP],[IP],[],
  [ネットワークインターフェース層],[HTTPデータ],[TCP],[IP],[イーサネット],
)